import math
from random import random

from _decimal import Decimal


def factorial(x):
    ans = Decimal(1)
    while x > 0:
        ans = ans * Decimal(x)
        x = x - 1
    return ans


def C(k, n):
    return factorial(n) / (factorial(k) * factorial(n - k))


def simulate(n, p, l, r):
    ans = Decimal(0.0)
    count_of_experiments = 10000
    for _ in range(count_of_experiments):
        count_of_successful_experiment = 0
        for i in range(n):
            rnd = Decimal(random())
            if rnd <= p:
                count_of_successful_experiment = count_of_successful_experiment + 1
        if l <= count_of_successful_experiment & count_of_successful_experiment <= r:
            ans = ans + 1
    ans = ans / Decimal(count_of_experiments)
    return ans


number_of_experiments = [10, 100, 1000, 10000]
probabilities = [Decimal(0.001), Decimal(0.01), Decimal(0.1), Decimal(0.25), Decimal(0.5)]
probabilities_from_integral = [
    [0.49999 - 0.49999,  0.49999 - 0.49999, 0.49999 - 0.49931, 0.4976 - 0.2939, 0.3413 + 0.3413],
    [0, 0, 0, 0,  0.3413 + 0.3413],
    [0, 0, 0, 0,  0.3413 + 0.3413],
    [0, 0, 0, 0,  0.3413 + 0.3413]]

for i, n in enumerate(number_of_experiments):
    for j, p in enumerate(probabilities):
        q = Decimal(1.0) - p
        l = math.ceil(float(n) / 2 - math.sqrt(n * p * q))
        r = math.floor(float(n) / 2 + math.sqrt(n * p * q))
        result = Decimal(0.0)
        for k in range(l, r + 1):
            result = result + C(k, n) * (p ** k) * (q ** (n - k))

        simulated_result = simulate(n, p, l, r)
        integral_result = probabilities_from_integral[i][j]
        print(
            f"Результаты эксперимента для n={n} и p={p:0,.4f} \n "
            f"Ответ, полученный с помощью симуляции: {simulated_result:0,.4f} \n "
            f"Точный ответ, полученный аналитически: {result:0,.4f} \n "
            f"Приближенную ответ, полученный с помощью предельной теоремы: {integral_result:0,.4f} \n")
